' <auto-generated>
'   This file has been automatically added to your project by the "HotAvalonia.Extensions" NuGet package
'   (https://nuget.org/packages/HotAvalonia.Extensions).
'
'   Please see https://github.com/Kir-Antipov/HotAvalonia for more information.
' </auto-generated>

#Region "License"
' MIT License
'
' Copyright (c) 2023-2024 Kir_Antipov
'
' Permission is hereby granted, free of charge, to any person obtaining a copy
' of this software and associated documentation files (the "Software"), to deal
' in the Software without restriction, including without limitation the rights
' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
' copies of the Software, and to permit persons to whom the Software is
' furnished to do so, subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in all
' copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
' SOFTWARE.
#End Region

#Disable Warning

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.CodeAnalysis
Imports System.IO
Imports System.Reflection
Imports System.Runtime.CompilerServices
Imports Avalonia

Namespace Global.HotAvalonia
    ''' <summary>
    ''' Indicates that the decorated method should be called whenever the associated Avalonia control is hot reloaded.
    ''' </summary>
    ''' <remarks>
    ''' This attribute is intended to be applied to parameterless instance methods of Avalonia controls.
    ''' When the control is hot reloaded, the method marked with this attribute is executed.
    ''' This can be used to refresh or update the control's state in response to hot reload events.
    '''
    ''' <br/><br/>
    '''
    ''' The method must meet the following requirements:
    ''' <list type="bullet">
    '''   <item>It must be an instance method (i.e., not static).</item>
    '''   <item>It must not have any parameters.</item>
    ''' </list>
    '''
    ''' Example usage:
    ''' <code>
    ''' <AvaloniaHotReload>
    ''' Private Sub Initialize()
    '''     ' Code to initialize or refresh
    '''     ' the control during hot reload.
    ''' End Sub
    ''' </code>
    ''' </remarks>
    <ExcludeFromCodeCoverage>
    <Conditional("ENABLE_XAML_HOT_RELOAD")>
    <AttributeUsage(AttributeTargets.Method)>
    Friend NotInheritable Class AvaloniaHotReloadAttribute
        Inherits Attribute
    End Class

    ''' <summary>
    ''' Provides extension methods for enabling and disabling hot reload functionality for Avalonia applications.
    ''' </summary>
    <ExcludeFromCodeCoverage>
    Friend Module AvaloniaHotReloadExtensions
#If ENABLE_XAML_HOT_RELOAD AndAlso Not DISABLE_XAML_HOT_RELOAD Then
        ''' <summary>
        ''' Creates a factory method for generating an <see cref="IHotReloadContext"/>
        ''' using the specified control type and its XAML file path.
        ''' </summary>
        ''' <param name="controlType">The control type.</param>
        ''' <param name="controlFilePath">The file path to the associated XAML file.</param>
        ''' <returns>A factory method for creating an <see cref="IHotReloadContext"/> instance.</returns>
        <DebuggerStepThrough>
        Private Function CreateHotReloadContextFactory(ByVal controlType As Type, ByVal controlFilePath As String) As Func(Of IHotReloadContext)
            Return Function()
                If Not String.IsNullOrEmpty(controlFilePath) AndAlso Not File.Exists(controlFilePath) Then
                    Throw New FileNotFoundException("The corresponding XAML file could not be found.", controlFilePath)
                End If

                Dim projectLocator as AvaloniaProjectLocator = CreateAvaloniaProjectLocator()
                If Not String.IsNullOrEmpty(controlFilePath) Then
                    projectLocator.AddHint(controlType, controlFilePath)
                End If

                Return CreateHotReloadContext(projectLocator)
            End Function
        End Function

        ''' <summary>
        ''' Creates a factory method for generating an <see cref="IHotReloadContext"/>
        ''' using a custom project path resolver.
        ''' </summary>
        ''' <param name="projectPathResolver">The callback function capable of resolving a project path for a given assembly.</param>
        ''' <returns>A factory method for creating an <see cref="IHotReloadContext"/> instance.</returns>
        <DebuggerStepThrough>
        Private Function CreateHotReloadContextFactory(ByVal projectPathResolver As Func(Of Assembly, String)) As Func(Of IHotReloadContext)
            Return Function()
                Dim projectLocator as AvaloniaProjectLocator = CreateAvaloniaProjectLocator()
                If projectPathResolver IsNot Nothing
                    projectLocator.AddHint(projectPathResolver)
                End If

                Return CreateHotReloadContext(projectLocator)
            End Function
        End Function

        ''' <summary>
        ''' Creates a hot reload context for the current environment.
        ''' </summary>
        ''' <param name="projectLocator">The project locator used to find source directories of assemblies.</param>
        ''' <returns>A hot reload context for the current environment.</returns>
        <DebuggerStepThrough>
        Private Function CreateHotReloadContext(ByVal projectLocator As AvaloniaProjectLocator) As IHotReloadContext
#If ENABLE_LITE_XAML_HOT_RELOAD Then
            Return AvaloniaHotReloadContext.CreateLite(projectLocator)
#Else
            Return AvaloniaHotReloadContext.Create(projectLocator)
#End If
        End Function

        ''' <summary>
        ''' Creates a new instance of the <see cref="AvaloniaProjectLocator"/> class.
        ''' </summary>
        ''' <returns>A new instance of the <see cref="AvaloniaProjectLocator"/> class.</returns>
        <DebuggerStepThrough>
        Private Function CreateAvaloniaProjectLocator() As AvaloniaProjectLocator
#If ENABLE_REMOTE_XAML_HOT_RELOAD Then
            Return New AvaloniaProjectLocator(HotAvalonia.IO.FileSystem.Connect(HotAvalonia.IO.FileSystem.Empty))
#Else
            Return New AvaloniaProjectLocator()
#End If
        End Function
#End If

        ''' <summary>
        ''' Enables hot reload functionality for the specified <see cref="AppBuilder"/> instance.
        ''' </summary>
        ''' <param name="builder">The app builder instance.</param>
        ''' <returns>The app builder instance.</returns>
        <DebuggerStepThrough>
        <Extension>
        Public Function UseHotReload(ByVal builder As AppBuilder) As AppBuilder
#If ENABLE_XAML_HOT_RELOAD AndAlso Not DISABLE_XAML_HOT_RELOAD Then
            AvaloniaHotReload.Enable(builder, CreateHotReloadContextFactory(Nothing))
#End If
            Return builder
        End Function

        ''' <summary>
        ''' Enables hot reload functionality for the specified <see cref="AppBuilder"/> instance.
        ''' </summary>
        ''' <param name="builder">The app builder instance.</param>
        ''' <param name="projectPathResolver">The callback function capable of resolving a project path for a given assembly.</param>
        ''' <returns>The app builder instance.</returns>
        <DebuggerStepThrough>
        <Extension>
        Public Function UseHotReload(ByVal builder As AppBuilder, ByVal projectPathResolver As Func(Of Assembly, String)) As AppBuilder
#If ENABLE_XAML_HOT_RELOAD AndAlso Not DISABLE_XAML_HOT_RELOAD Then
            AvaloniaHotReload.Enable(builder, CreateHotReloadContextFactory(projectPathResolver))
#End If
            Return builder
        End Function

        ''' <summary>
        ''' Enables hot reload functionality for the given Avalonia application.
        ''' </summary>
        ''' <param name="app">The Avalonia application instance for which hot reload should be enabled.</param>
        ''' <param name="appFilePath">The file path of the application's main source file. Optional if the method called within the file of interest.</param>
        <Conditional("ENABLE_XAML_HOT_RELOAD")>
        <DebuggerStepThrough>
        <Extension>
        Public Sub EnableHotReload(ByVal app As Application, <CallerFilePath> Optional ByVal appFilePath As String = Nothing)
#If ENABLE_XAML_HOT_RELOAD AndAlso Not DISABLE_XAML_HOT_RELOAD Then
            AvaloniaHotReload.Enable(app, CreateHotReloadContextFactory(app?.GetType(), appFilePath))
#End If
        End Sub

        ''' <summary>
        ''' Enables hot reload functionality for the given Avalonia application.
        ''' </summary>
        ''' <param name="app">The Avalonia application instance for which hot reload should be enabled.</param>
        ''' <param name="projectPathResolver">The callback function capable of resolving a project path for a given assembly.</param>
        <Conditional("ENABLE_XAML_HOT_RELOAD")>
        <DebuggerStepThrough>
        <Extension>
        Public Sub EnableHotReload(ByVal app As Application, ByVal projectPathResolver As Func(Of Assembly, String))
#If ENABLE_XAML_HOT_RELOAD AndAlso Not DISABLE_XAML_HOT_RELOAD Then
            AvaloniaHotReload.Enable(app, CreateHotReloadContextFactory(projectPathResolver))
#End If
        End Sub

        ''' <summary>
        ''' Disables hot reload functionality for the given Avalonia application.
        ''' </summary>
        ''' <param name="app">The Avalonia application instance for which hot reload should be disabled.</param>
        <Conditional("ENABLE_XAML_HOT_RELOAD")>
        <DebuggerStepThrough>
        <Extension>
        Public Sub DisableHotReload(ByVal app As Application)
#If ENABLE_XAML_HOT_RELOAD AndAlso Not DISABLE_XAML_HOT_RELOAD Then
            AvaloniaHotReload.Disable(app)
#End If
        End Sub
    End Module
End Namespace

#Enable Warning
